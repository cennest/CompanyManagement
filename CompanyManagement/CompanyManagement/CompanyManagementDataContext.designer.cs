#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CompanyManagement
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CompanyManagement")]
	public partial class CompanyManagementDataContextDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    partial void InsertDepartmentMaster(DepartmentMaster instance);
    partial void UpdateDepartmentMaster(DepartmentMaster instance);
    partial void DeleteDepartmentMaster(DepartmentMaster instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertEmployeeProject(EmployeeProject instance);
    partial void UpdateEmployeeProject(EmployeeProject instance);
    partial void DeleteEmployeeProject(EmployeeProject instance);
    partial void InsertEmployeeTask(EmployeeTask instance);
    partial void UpdateEmployeeTask(EmployeeTask instance);
    partial void DeleteEmployeeTask(EmployeeTask instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertProjectTask(ProjectTask instance);
    partial void UpdateProjectTask(ProjectTask instance);
    partial void DeleteProjectTask(ProjectTask instance);
    partial void InsertProjectTechnology(ProjectTechnology instance);
    partial void UpdateProjectTechnology(ProjectTechnology instance);
    partial void DeleteProjectTechnology(ProjectTechnology instance);
    partial void InsertStatusMaster(StatusMaster instance);
    partial void UpdateStatusMaster(StatusMaster instance);
    partial void DeleteStatusMaster(StatusMaster instance);
    partial void InsertTaskInformation(TaskInformation instance);
    partial void UpdateTaskInformation(TaskInformation instance);
    partial void DeleteTaskInformation(TaskInformation instance);
    partial void InsertTechnologyMaster(TechnologyMaster instance);
    partial void UpdateTechnologyMaster(TechnologyMaster instance);
    partial void DeleteTechnologyMaster(TechnologyMaster instance);
    partial void InsertTechnologyTask(TechnologyTask instance);
    partial void UpdateTechnologyTask(TechnologyTask instance);
    partial void DeleteTechnologyTask(TechnologyTask instance);
    #endregion
		
		public CompanyManagementDataContextDataContext() : 
				base(global::CompanyManagement.Properties.Settings.Default.CompanyManagementConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CompanyManagementDataContextDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CompanyManagementDataContextDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CompanyManagementDataContextDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CompanyManagementDataContextDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<Company> Companies
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		public System.Data.Linq.Table<DepartmentMaster> DepartmentMasters
		{
			get
			{
				return this.GetTable<DepartmentMaster>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeProject> EmployeeProjects
		{
			get
			{
				return this.GetTable<EmployeeProject>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeTask> EmployeeTasks
		{
			get
			{
				return this.GetTable<EmployeeTask>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<ProjectTask> ProjectTasks
		{
			get
			{
				return this.GetTable<ProjectTask>();
			}
		}
		
		public System.Data.Linq.Table<ProjectTechnology> ProjectTechnologies
		{
			get
			{
				return this.GetTable<ProjectTechnology>();
			}
		}
		
		public System.Data.Linq.Table<StatusMaster> StatusMasters
		{
			get
			{
				return this.GetTable<StatusMaster>();
			}
		}
		
		public System.Data.Linq.Table<TaskInformation> TaskInformations
		{
			get
			{
				return this.GetTable<TaskInformation>();
			}
		}
		
		public System.Data.Linq.Table<TechnologyMaster> TechnologyMasters
		{
			get
			{
				return this.GetTable<TechnologyMaster>();
			}
		}
		
		public System.Data.Linq.Table<TechnologyTask> TechnologyTasks
		{
			get
			{
				return this.GetTable<TechnologyTask>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Client")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClientId;
		
		private string _ClientName;
		
		private int _CompanyId;
		
		private EntitySet<Project> _Projects;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientIdChanging(int value);
    partial void OnClientIdChanged();
    partial void OnClientNameChanging(string value);
    partial void OnClientNameChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public Client()
		{
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientName", DbType="VarChar(100)")]
		public string ClientName
		{
			get
			{
				return this._ClientName;
			}
			set
			{
				if ((this._ClientName != value))
				{
					this.OnClientNameChanging(value);
					this.SendPropertyChanging();
					this._ClientName = value;
					this.SendPropertyChanged("ClientName");
					this.OnClientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="Int NOT NULL")]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Project", Storage="_Projects", ThisKey="ClientId", OtherKey="ClientId")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Client", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Clients.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Clients.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Company")]
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyId;
		
		private string _CompanyName;
		
		private EntitySet<Client> _Clients;
		
		private EntitySet<DepartmentMaster> _DepartmentMasters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    #endregion
		
		public Company()
		{
			this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
			this._DepartmentMasters = new EntitySet<DepartmentMaster>(new Action<DepartmentMaster>(this.attach_DepartmentMasters), new Action<DepartmentMaster>(this.detach_DepartmentMasters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Client", Storage="_Clients", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<Client> Clients
		{
			get
			{
				return this._Clients;
			}
			set
			{
				this._Clients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_DepartmentMaster", Storage="_DepartmentMasters", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<DepartmentMaster> DepartmentMasters
		{
			get
			{
				return this._DepartmentMasters;
			}
			set
			{
				this._DepartmentMasters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_DepartmentMasters(DepartmentMaster entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_DepartmentMasters(DepartmentMaster entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DepartmentMaster")]
	public partial class DepartmentMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DepartmentId;
		
		private string _DepartmentName;
		
		private int _CompanyId;
		
		private System.Nullable<int> _DepartmetnHead;
		
		private EntitySet<Employee> _Employees;
		
		private EntitySet<Project> _Projects;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentIdChanging(int value);
    partial void OnDepartmentIdChanged();
    partial void OnDepartmentNameChanging(string value);
    partial void OnDepartmentNameChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnDepartmetnHeadChanging(System.Nullable<int> value);
    partial void OnDepartmetnHeadChanged();
    #endregion
		
		public DepartmentMaster()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			this._Company = default(EntityRef<Company>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string DepartmentName
		{
			get
			{
				return this._DepartmentName;
			}
			set
			{
				if ((this._DepartmentName != value))
				{
					this.OnDepartmentNameChanging(value);
					this.SendPropertyChanging();
					this._DepartmentName = value;
					this.SendPropertyChanged("DepartmentName");
					this.OnDepartmentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="Int NOT NULL")]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmetnHead", DbType="Int")]
		public System.Nullable<int> DepartmetnHead
		{
			get
			{
				return this._DepartmetnHead;
			}
			set
			{
				if ((this._DepartmetnHead != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmetnHeadChanging(value);
					this.SendPropertyChanging();
					this._DepartmetnHead = value;
					this.SendPropertyChanged("DepartmetnHead");
					this.OnDepartmetnHeadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DepartmentMaster_Employee", Storage="_Employees", ThisKey="DepartmentId", OtherKey="DepartmentId")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DepartmentMaster_Project", Storage="_Projects", ThisKey="DepartmentId", OtherKey="DepartmentId")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_DepartmentMaster", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.DepartmentMasters.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.DepartmentMasters.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_DepartmentMaster", Storage="_Employee", ThisKey="DepartmetnHead", OtherKey="EmployeeId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.DepartmentMasters.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.DepartmentMasters.Add(this);
						this._DepartmetnHead = value.EmployeeId;
					}
					else
					{
						this._DepartmetnHead = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.DepartmentMaster = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.DepartmentMaster = null;
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.DepartmentMaster = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.DepartmentMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeId;
		
		private string _EmployeeName;
		
		private int _DepartmentId;
		
		private EntitySet<DepartmentMaster> _DepartmentMasters;
		
		private EntitySet<EmployeeProject> _EmployeeProjects;
		
		private EntitySet<EmployeeTask> _EmployeeTasks;
		
		private EntityRef<DepartmentMaster> _DepartmentMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIdChanging(int value);
    partial void OnEmployeeIdChanged();
    partial void OnEmployeeNameChanging(string value);
    partial void OnEmployeeNameChanged();
    partial void OnDepartmentIdChanging(int value);
    partial void OnDepartmentIdChanged();
    #endregion
		
		public Employee()
		{
			this._DepartmentMasters = new EntitySet<DepartmentMaster>(new Action<DepartmentMaster>(this.attach_DepartmentMasters), new Action<DepartmentMaster>(this.detach_DepartmentMasters));
			this._EmployeeProjects = new EntitySet<EmployeeProject>(new Action<EmployeeProject>(this.attach_EmployeeProjects), new Action<EmployeeProject>(this.detach_EmployeeProjects));
			this._EmployeeTasks = new EntitySet<EmployeeTask>(new Action<EmployeeTask>(this.attach_EmployeeTasks), new Action<EmployeeTask>(this.detach_EmployeeTasks));
			this._DepartmentMaster = default(EntityRef<DepartmentMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string EmployeeName
		{
			get
			{
				return this._EmployeeName;
			}
			set
			{
				if ((this._EmployeeName != value))
				{
					this.OnEmployeeNameChanging(value);
					this.SendPropertyChanging();
					this._EmployeeName = value;
					this.SendPropertyChanged("EmployeeName");
					this.OnEmployeeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentId", DbType="Int NOT NULL")]
		public int DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					if (this._DepartmentMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_DepartmentMaster", Storage="_DepartmentMasters", ThisKey="EmployeeId", OtherKey="DepartmetnHead")]
		public EntitySet<DepartmentMaster> DepartmentMasters
		{
			get
			{
				return this._DepartmentMasters;
			}
			set
			{
				this._DepartmentMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeProject", Storage="_EmployeeProjects", ThisKey="EmployeeId", OtherKey="EmployeeId")]
		public EntitySet<EmployeeProject> EmployeeProjects
		{
			get
			{
				return this._EmployeeProjects;
			}
			set
			{
				this._EmployeeProjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeTask", Storage="_EmployeeTasks", ThisKey="EmployeeId", OtherKey="EmployeeId")]
		public EntitySet<EmployeeTask> EmployeeTasks
		{
			get
			{
				return this._EmployeeTasks;
			}
			set
			{
				this._EmployeeTasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DepartmentMaster_Employee", Storage="_DepartmentMaster", ThisKey="DepartmentId", OtherKey="DepartmentId", IsForeignKey=true)]
		public DepartmentMaster DepartmentMaster
		{
			get
			{
				return this._DepartmentMaster.Entity;
			}
			set
			{
				DepartmentMaster previousValue = this._DepartmentMaster.Entity;
				if (((previousValue != value) 
							|| (this._DepartmentMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DepartmentMaster.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._DepartmentMaster.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._DepartmentId = value.DepartmentId;
					}
					else
					{
						this._DepartmentId = default(int);
					}
					this.SendPropertyChanged("DepartmentMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DepartmentMasters(DepartmentMaster entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_DepartmentMasters(DepartmentMaster entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_EmployeeProjects(EmployeeProject entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EmployeeProjects(EmployeeProject entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_EmployeeTasks(EmployeeTask entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EmployeeTasks(EmployeeTask entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmployeeProject")]
	public partial class EmployeeProject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeProjectId;
		
		private int _ProjectId;
		
		private int _EmployeeId;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeProjectIdChanging(int value);
    partial void OnEmployeeProjectIdChanged();
    partial void OnProjectIdChanging(int value);
    partial void OnProjectIdChanged();
    partial void OnEmployeeIdChanging(int value);
    partial void OnEmployeeIdChanged();
    #endregion
		
		public EmployeeProject()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeProjectId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmployeeProjectId
		{
			get
			{
				return this._EmployeeProjectId;
			}
			set
			{
				if ((this._EmployeeProjectId != value))
				{
					this.OnEmployeeProjectIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeProjectId = value;
					this.SendPropertyChanged("EmployeeProjectId");
					this.OnEmployeeProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", DbType="Int NOT NULL")]
		public int ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="Int NOT NULL")]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeProject", Storage="_Employee", ThisKey="EmployeeId", OtherKey="EmployeeId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EmployeeProjects.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EmployeeProjects.Add(this);
						this._EmployeeId = value.EmployeeId;
					}
					else
					{
						this._EmployeeId = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_EmployeeProject", Storage="_Project", ThisKey="ProjectId", OtherKey="ProjectId", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.EmployeeProjects.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.EmployeeProjects.Add(this);
						this._ProjectId = value.ProjectId;
					}
					else
					{
						this._ProjectId = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmployeeTask")]
	public partial class EmployeeTask : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeTaskId;
		
		private int _EmployeeId;
		
		private int _TaskId;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<TaskInformation> _TaskInformation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeTaskIdChanging(int value);
    partial void OnEmployeeTaskIdChanged();
    partial void OnEmployeeIdChanging(int value);
    partial void OnEmployeeIdChanged();
    partial void OnTaskIdChanging(int value);
    partial void OnTaskIdChanged();
    #endregion
		
		public EmployeeTask()
		{
			this._Employee = default(EntityRef<Employee>);
			this._TaskInformation = default(EntityRef<TaskInformation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeTaskId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmployeeTaskId
		{
			get
			{
				return this._EmployeeTaskId;
			}
			set
			{
				if ((this._EmployeeTaskId != value))
				{
					this.OnEmployeeTaskIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeTaskId = value;
					this.SendPropertyChanged("EmployeeTaskId");
					this.OnEmployeeTaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="Int NOT NULL")]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskId", DbType="Int NOT NULL")]
		public int TaskId
		{
			get
			{
				return this._TaskId;
			}
			set
			{
				if ((this._TaskId != value))
				{
					if (this._TaskInformation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIdChanging(value);
					this.SendPropertyChanging();
					this._TaskId = value;
					this.SendPropertyChanged("TaskId");
					this.OnTaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeTask", Storage="_Employee", ThisKey="EmployeeId", OtherKey="EmployeeId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EmployeeTasks.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EmployeeTasks.Add(this);
						this._EmployeeId = value.EmployeeId;
					}
					else
					{
						this._EmployeeId = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaskInformation_EmployeeTask", Storage="_TaskInformation", ThisKey="TaskId", OtherKey="TaskId", IsForeignKey=true)]
		public TaskInformation TaskInformation
		{
			get
			{
				return this._TaskInformation.Entity;
			}
			set
			{
				TaskInformation previousValue = this._TaskInformation.Entity;
				if (((previousValue != value) 
							|| (this._TaskInformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaskInformation.Entity = null;
						previousValue.EmployeeTasks.Remove(this);
					}
					this._TaskInformation.Entity = value;
					if ((value != null))
					{
						value.EmployeeTasks.Add(this);
						this._TaskId = value.TaskId;
					}
					else
					{
						this._TaskId = default(int);
					}
					this.SendPropertyChanged("TaskInformation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectId;
		
		private string _ProjectName;
		
		private int _DepartmentId;
		
		private int _ClientId;
		
		private int _StatusId;
		
		private EntitySet<EmployeeProject> _EmployeeProjects;
		
		private EntitySet<ProjectTask> _ProjectTasks;
		
		private EntitySet<ProjectTechnology> _ProjectTechnologies;
		
		private EntitySet<TaskInformation> _TaskInformations;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<DepartmentMaster> _DepartmentMaster;
		
		private EntityRef<StatusMaster> _StatusMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectIdChanging(int value);
    partial void OnProjectIdChanged();
    partial void OnProjectNameChanging(string value);
    partial void OnProjectNameChanged();
    partial void OnDepartmentIdChanging(int value);
    partial void OnDepartmentIdChanged();
    partial void OnClientIdChanging(int value);
    partial void OnClientIdChanged();
    partial void OnStatusIdChanging(int value);
    partial void OnStatusIdChanged();
    #endregion
		
		public Project()
		{
			this._EmployeeProjects = new EntitySet<EmployeeProject>(new Action<EmployeeProject>(this.attach_EmployeeProjects), new Action<EmployeeProject>(this.detach_EmployeeProjects));
			this._ProjectTasks = new EntitySet<ProjectTask>(new Action<ProjectTask>(this.attach_ProjectTasks), new Action<ProjectTask>(this.detach_ProjectTasks));
			this._ProjectTechnologies = new EntitySet<ProjectTechnology>(new Action<ProjectTechnology>(this.attach_ProjectTechnologies), new Action<ProjectTechnology>(this.detach_ProjectTechnologies));
			this._TaskInformations = new EntitySet<TaskInformation>(new Action<TaskInformation>(this.attach_TaskInformations), new Action<TaskInformation>(this.detach_TaskInformations));
			this._Client = default(EntityRef<Client>);
			this._DepartmentMaster = default(EntityRef<DepartmentMaster>);
			this._StatusMaster = default(EntityRef<StatusMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this.OnProjectNameChanging(value);
					this.SendPropertyChanging();
					this._ProjectName = value;
					this.SendPropertyChanged("ProjectName");
					this.OnProjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentId", DbType="Int NOT NULL")]
		public int DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					if (this._DepartmentMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="Int NOT NULL")]
		public int ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusId", DbType="Int NOT NULL")]
		public int StatusId
		{
			get
			{
				return this._StatusId;
			}
			set
			{
				if ((this._StatusId != value))
				{
					if (this._StatusMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIdChanging(value);
					this.SendPropertyChanging();
					this._StatusId = value;
					this.SendPropertyChanged("StatusId");
					this.OnStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_EmployeeProject", Storage="_EmployeeProjects", ThisKey="ProjectId", OtherKey="ProjectId")]
		public EntitySet<EmployeeProject> EmployeeProjects
		{
			get
			{
				return this._EmployeeProjects;
			}
			set
			{
				this._EmployeeProjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectTask", Storage="_ProjectTasks", ThisKey="ProjectId", OtherKey="ProjectId")]
		public EntitySet<ProjectTask> ProjectTasks
		{
			get
			{
				return this._ProjectTasks;
			}
			set
			{
				this._ProjectTasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectTechnology", Storage="_ProjectTechnologies", ThisKey="ProjectId", OtherKey="ProjectId")]
		public EntitySet<ProjectTechnology> ProjectTechnologies
		{
			get
			{
				return this._ProjectTechnologies;
			}
			set
			{
				this._ProjectTechnologies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_TaskInformation", Storage="_TaskInformations", ThisKey="ProjectId", OtherKey="ProjectId")]
		public EntitySet<TaskInformation> TaskInformations
		{
			get
			{
				return this._TaskInformations;
			}
			set
			{
				this._TaskInformations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Project", Storage="_Client", ThisKey="ClientId", OtherKey="ClientId", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._ClientId = value.ClientId;
					}
					else
					{
						this._ClientId = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DepartmentMaster_Project", Storage="_DepartmentMaster", ThisKey="DepartmentId", OtherKey="DepartmentId", IsForeignKey=true)]
		public DepartmentMaster DepartmentMaster
		{
			get
			{
				return this._DepartmentMaster.Entity;
			}
			set
			{
				DepartmentMaster previousValue = this._DepartmentMaster.Entity;
				if (((previousValue != value) 
							|| (this._DepartmentMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DepartmentMaster.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._DepartmentMaster.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._DepartmentId = value.DepartmentId;
					}
					else
					{
						this._DepartmentId = default(int);
					}
					this.SendPropertyChanged("DepartmentMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatusMaster_Project", Storage="_StatusMaster", ThisKey="StatusId", OtherKey="StatusId", IsForeignKey=true)]
		public StatusMaster StatusMaster
		{
			get
			{
				return this._StatusMaster.Entity;
			}
			set
			{
				StatusMaster previousValue = this._StatusMaster.Entity;
				if (((previousValue != value) 
							|| (this._StatusMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StatusMaster.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._StatusMaster.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._StatusId = value.StatusId;
					}
					else
					{
						this._StatusId = default(int);
					}
					this.SendPropertyChanged("StatusMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeProjects(EmployeeProject entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_EmployeeProjects(EmployeeProject entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_ProjectTasks(ProjectTask entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ProjectTasks(ProjectTask entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_ProjectTechnologies(ProjectTechnology entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ProjectTechnologies(ProjectTechnology entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_TaskInformations(TaskInformation entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_TaskInformations(TaskInformation entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectTask")]
	public partial class ProjectTask : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectTaskId;
		
		private int _ProjectId;
		
		private int _TaskId;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<TaskInformation> _TaskInformation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectTaskIdChanging(int value);
    partial void OnProjectTaskIdChanged();
    partial void OnProjectIdChanging(int value);
    partial void OnProjectIdChanged();
    partial void OnTaskIdChanging(int value);
    partial void OnTaskIdChanged();
    #endregion
		
		public ProjectTask()
		{
			this._Project = default(EntityRef<Project>);
			this._TaskInformation = default(EntityRef<TaskInformation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectTaskId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProjectTaskId
		{
			get
			{
				return this._ProjectTaskId;
			}
			set
			{
				if ((this._ProjectTaskId != value))
				{
					this.OnProjectTaskIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectTaskId = value;
					this.SendPropertyChanged("ProjectTaskId");
					this.OnProjectTaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", DbType="Int NOT NULL")]
		public int ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskId", DbType="Int NOT NULL")]
		public int TaskId
		{
			get
			{
				return this._TaskId;
			}
			set
			{
				if ((this._TaskId != value))
				{
					if (this._TaskInformation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIdChanging(value);
					this.SendPropertyChanging();
					this._TaskId = value;
					this.SendPropertyChanged("TaskId");
					this.OnTaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectTask", Storage="_Project", ThisKey="ProjectId", OtherKey="ProjectId", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProjectTasks.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProjectTasks.Add(this);
						this._ProjectId = value.ProjectId;
					}
					else
					{
						this._ProjectId = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaskInformation_ProjectTask", Storage="_TaskInformation", ThisKey="TaskId", OtherKey="TaskId", IsForeignKey=true)]
		public TaskInformation TaskInformation
		{
			get
			{
				return this._TaskInformation.Entity;
			}
			set
			{
				TaskInformation previousValue = this._TaskInformation.Entity;
				if (((previousValue != value) 
							|| (this._TaskInformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaskInformation.Entity = null;
						previousValue.ProjectTasks.Remove(this);
					}
					this._TaskInformation.Entity = value;
					if ((value != null))
					{
						value.ProjectTasks.Add(this);
						this._TaskId = value.TaskId;
					}
					else
					{
						this._TaskId = default(int);
					}
					this.SendPropertyChanged("TaskInformation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectTechnology")]
	public partial class ProjectTechnology : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectTechnologyId;
		
		private int _ProjectId;
		
		private int _TechnologyId;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<TechnologyMaster> _TechnologyMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectTechnologyIdChanging(int value);
    partial void OnProjectTechnologyIdChanged();
    partial void OnProjectIdChanging(int value);
    partial void OnProjectIdChanged();
    partial void OnTechnologyIdChanging(int value);
    partial void OnTechnologyIdChanged();
    #endregion
		
		public ProjectTechnology()
		{
			this._Project = default(EntityRef<Project>);
			this._TechnologyMaster = default(EntityRef<TechnologyMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectTechnologyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProjectTechnologyId
		{
			get
			{
				return this._ProjectTechnologyId;
			}
			set
			{
				if ((this._ProjectTechnologyId != value))
				{
					this.OnProjectTechnologyIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectTechnologyId = value;
					this.SendPropertyChanged("ProjectTechnologyId");
					this.OnProjectTechnologyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", DbType="Int NOT NULL")]
		public int ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TechnologyId", DbType="Int NOT NULL")]
		public int TechnologyId
		{
			get
			{
				return this._TechnologyId;
			}
			set
			{
				if ((this._TechnologyId != value))
				{
					if (this._TechnologyMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTechnologyIdChanging(value);
					this.SendPropertyChanging();
					this._TechnologyId = value;
					this.SendPropertyChanged("TechnologyId");
					this.OnTechnologyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectTechnology", Storage="_Project", ThisKey="ProjectId", OtherKey="ProjectId", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProjectTechnologies.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProjectTechnologies.Add(this);
						this._ProjectId = value.ProjectId;
					}
					else
					{
						this._ProjectId = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TechnologyMaster_ProjectTechnology", Storage="_TechnologyMaster", ThisKey="TechnologyId", OtherKey="TechnologyId", IsForeignKey=true)]
		public TechnologyMaster TechnologyMaster
		{
			get
			{
				return this._TechnologyMaster.Entity;
			}
			set
			{
				TechnologyMaster previousValue = this._TechnologyMaster.Entity;
				if (((previousValue != value) 
							|| (this._TechnologyMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TechnologyMaster.Entity = null;
						previousValue.ProjectTechnologies.Remove(this);
					}
					this._TechnologyMaster.Entity = value;
					if ((value != null))
					{
						value.ProjectTechnologies.Add(this);
						this._TechnologyId = value.TechnologyId;
					}
					else
					{
						this._TechnologyId = default(int);
					}
					this.SendPropertyChanged("TechnologyMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StatusMaster")]
	public partial class StatusMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StatusId;
		
		private string _StatusName;
		
		private EntitySet<Project> _Projects;
		
		private EntitySet<TaskInformation> _TaskInformations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStatusIdChanging(int value);
    partial void OnStatusIdChanged();
    partial void OnStatusNameChanging(string value);
    partial void OnStatusNameChanged();
    #endregion
		
		public StatusMaster()
		{
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			this._TaskInformations = new EntitySet<TaskInformation>(new Action<TaskInformation>(this.attach_TaskInformations), new Action<TaskInformation>(this.detach_TaskInformations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StatusId
		{
			get
			{
				return this._StatusId;
			}
			set
			{
				if ((this._StatusId != value))
				{
					this.OnStatusIdChanging(value);
					this.SendPropertyChanging();
					this._StatusId = value;
					this.SendPropertyChanged("StatusId");
					this.OnStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string StatusName
		{
			get
			{
				return this._StatusName;
			}
			set
			{
				if ((this._StatusName != value))
				{
					this.OnStatusNameChanging(value);
					this.SendPropertyChanging();
					this._StatusName = value;
					this.SendPropertyChanged("StatusName");
					this.OnStatusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatusMaster_Project", Storage="_Projects", ThisKey="StatusId", OtherKey="StatusId")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatusMaster_TaskInformation", Storage="_TaskInformations", ThisKey="StatusId", OtherKey="StatusId")]
		public EntitySet<TaskInformation> TaskInformations
		{
			get
			{
				return this._TaskInformations;
			}
			set
			{
				this._TaskInformations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.StatusMaster = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.StatusMaster = null;
		}
		
		private void attach_TaskInformations(TaskInformation entity)
		{
			this.SendPropertyChanging();
			entity.StatusMaster = this;
		}
		
		private void detach_TaskInformations(TaskInformation entity)
		{
			this.SendPropertyChanging();
			entity.StatusMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaskInformation")]
	public partial class TaskInformation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskId;
		
		private string _TaskName;
		
		private int _StatusId;
		
		private int _ProjectId;
		
		private EntitySet<EmployeeTask> _EmployeeTasks;
		
		private EntitySet<ProjectTask> _ProjectTasks;
		
		private EntitySet<TechnologyTask> _TechnologyTasks;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<StatusMaster> _StatusMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskIdChanging(int value);
    partial void OnTaskIdChanged();
    partial void OnTaskNameChanging(string value);
    partial void OnTaskNameChanged();
    partial void OnStatusIdChanging(int value);
    partial void OnStatusIdChanged();
    partial void OnProjectIdChanging(int value);
    partial void OnProjectIdChanged();
    #endregion
		
		public TaskInformation()
		{
			this._EmployeeTasks = new EntitySet<EmployeeTask>(new Action<EmployeeTask>(this.attach_EmployeeTasks), new Action<EmployeeTask>(this.detach_EmployeeTasks));
			this._ProjectTasks = new EntitySet<ProjectTask>(new Action<ProjectTask>(this.attach_ProjectTasks), new Action<ProjectTask>(this.detach_ProjectTasks));
			this._TechnologyTasks = new EntitySet<TechnologyTask>(new Action<TechnologyTask>(this.attach_TechnologyTasks), new Action<TechnologyTask>(this.detach_TechnologyTasks));
			this._Project = default(EntityRef<Project>);
			this._StatusMaster = default(EntityRef<StatusMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TaskId
		{
			get
			{
				return this._TaskId;
			}
			set
			{
				if ((this._TaskId != value))
				{
					this.OnTaskIdChanging(value);
					this.SendPropertyChanging();
					this._TaskId = value;
					this.SendPropertyChanged("TaskId");
					this.OnTaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string TaskName
		{
			get
			{
				return this._TaskName;
			}
			set
			{
				if ((this._TaskName != value))
				{
					this.OnTaskNameChanging(value);
					this.SendPropertyChanging();
					this._TaskName = value;
					this.SendPropertyChanged("TaskName");
					this.OnTaskNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusId", DbType="Int NOT NULL")]
		public int StatusId
		{
			get
			{
				return this._StatusId;
			}
			set
			{
				if ((this._StatusId != value))
				{
					if (this._StatusMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIdChanging(value);
					this.SendPropertyChanging();
					this._StatusId = value;
					this.SendPropertyChanged("StatusId");
					this.OnStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", DbType="Int NOT NULL")]
		public int ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaskInformation_EmployeeTask", Storage="_EmployeeTasks", ThisKey="TaskId", OtherKey="TaskId")]
		public EntitySet<EmployeeTask> EmployeeTasks
		{
			get
			{
				return this._EmployeeTasks;
			}
			set
			{
				this._EmployeeTasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaskInformation_ProjectTask", Storage="_ProjectTasks", ThisKey="TaskId", OtherKey="TaskId")]
		public EntitySet<ProjectTask> ProjectTasks
		{
			get
			{
				return this._ProjectTasks;
			}
			set
			{
				this._ProjectTasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaskInformation_TechnologyTask", Storage="_TechnologyTasks", ThisKey="TaskId", OtherKey="TaskId")]
		public EntitySet<TechnologyTask> TechnologyTasks
		{
			get
			{
				return this._TechnologyTasks;
			}
			set
			{
				this._TechnologyTasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_TaskInformation", Storage="_Project", ThisKey="ProjectId", OtherKey="ProjectId", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.TaskInformations.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.TaskInformations.Add(this);
						this._ProjectId = value.ProjectId;
					}
					else
					{
						this._ProjectId = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatusMaster_TaskInformation", Storage="_StatusMaster", ThisKey="StatusId", OtherKey="StatusId", IsForeignKey=true)]
		public StatusMaster StatusMaster
		{
			get
			{
				return this._StatusMaster.Entity;
			}
			set
			{
				StatusMaster previousValue = this._StatusMaster.Entity;
				if (((previousValue != value) 
							|| (this._StatusMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StatusMaster.Entity = null;
						previousValue.TaskInformations.Remove(this);
					}
					this._StatusMaster.Entity = value;
					if ((value != null))
					{
						value.TaskInformations.Add(this);
						this._StatusId = value.StatusId;
					}
					else
					{
						this._StatusId = default(int);
					}
					this.SendPropertyChanged("StatusMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeTasks(EmployeeTask entity)
		{
			this.SendPropertyChanging();
			entity.TaskInformation = this;
		}
		
		private void detach_EmployeeTasks(EmployeeTask entity)
		{
			this.SendPropertyChanging();
			entity.TaskInformation = null;
		}
		
		private void attach_ProjectTasks(ProjectTask entity)
		{
			this.SendPropertyChanging();
			entity.TaskInformation = this;
		}
		
		private void detach_ProjectTasks(ProjectTask entity)
		{
			this.SendPropertyChanging();
			entity.TaskInformation = null;
		}
		
		private void attach_TechnologyTasks(TechnologyTask entity)
		{
			this.SendPropertyChanging();
			entity.TaskInformation = this;
		}
		
		private void detach_TechnologyTasks(TechnologyTask entity)
		{
			this.SendPropertyChanging();
			entity.TaskInformation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TechnologyMaster")]
	public partial class TechnologyMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TechnologyId;
		
		private string _TechnologyName;
		
		private EntitySet<ProjectTechnology> _ProjectTechnologies;
		
		private EntitySet<TechnologyTask> _TechnologyTasks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTechnologyIdChanging(int value);
    partial void OnTechnologyIdChanged();
    partial void OnTechnologyNameChanging(string value);
    partial void OnTechnologyNameChanged();
    #endregion
		
		public TechnologyMaster()
		{
			this._ProjectTechnologies = new EntitySet<ProjectTechnology>(new Action<ProjectTechnology>(this.attach_ProjectTechnologies), new Action<ProjectTechnology>(this.detach_ProjectTechnologies));
			this._TechnologyTasks = new EntitySet<TechnologyTask>(new Action<TechnologyTask>(this.attach_TechnologyTasks), new Action<TechnologyTask>(this.detach_TechnologyTasks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TechnologyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TechnologyId
		{
			get
			{
				return this._TechnologyId;
			}
			set
			{
				if ((this._TechnologyId != value))
				{
					this.OnTechnologyIdChanging(value);
					this.SendPropertyChanging();
					this._TechnologyId = value;
					this.SendPropertyChanged("TechnologyId");
					this.OnTechnologyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TechnologyName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string TechnologyName
		{
			get
			{
				return this._TechnologyName;
			}
			set
			{
				if ((this._TechnologyName != value))
				{
					this.OnTechnologyNameChanging(value);
					this.SendPropertyChanging();
					this._TechnologyName = value;
					this.SendPropertyChanged("TechnologyName");
					this.OnTechnologyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TechnologyMaster_ProjectTechnology", Storage="_ProjectTechnologies", ThisKey="TechnologyId", OtherKey="TechnologyId")]
		public EntitySet<ProjectTechnology> ProjectTechnologies
		{
			get
			{
				return this._ProjectTechnologies;
			}
			set
			{
				this._ProjectTechnologies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TechnologyMaster_TechnologyTask", Storage="_TechnologyTasks", ThisKey="TechnologyId", OtherKey="TechnologyId")]
		public EntitySet<TechnologyTask> TechnologyTasks
		{
			get
			{
				return this._TechnologyTasks;
			}
			set
			{
				this._TechnologyTasks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectTechnologies(ProjectTechnology entity)
		{
			this.SendPropertyChanging();
			entity.TechnologyMaster = this;
		}
		
		private void detach_ProjectTechnologies(ProjectTechnology entity)
		{
			this.SendPropertyChanging();
			entity.TechnologyMaster = null;
		}
		
		private void attach_TechnologyTasks(TechnologyTask entity)
		{
			this.SendPropertyChanging();
			entity.TechnologyMaster = this;
		}
		
		private void detach_TechnologyTasks(TechnologyTask entity)
		{
			this.SendPropertyChanging();
			entity.TechnologyMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TechnologyTask")]
	public partial class TechnologyTask : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TechnologyTask1;
		
		private int _TechnologyId;
		
		private int _TaskId;
		
		private EntityRef<TaskInformation> _TaskInformation;
		
		private EntityRef<TechnologyMaster> _TechnologyMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTechnologyTask1Changing(int value);
    partial void OnTechnologyTask1Changed();
    partial void OnTechnologyIdChanging(int value);
    partial void OnTechnologyIdChanged();
    partial void OnTaskIdChanging(int value);
    partial void OnTaskIdChanged();
    #endregion
		
		public TechnologyTask()
		{
			this._TaskInformation = default(EntityRef<TaskInformation>);
			this._TechnologyMaster = default(EntityRef<TechnologyMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="TechnologyTask", Storage="_TechnologyTask1", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TechnologyTask1
		{
			get
			{
				return this._TechnologyTask1;
			}
			set
			{
				if ((this._TechnologyTask1 != value))
				{
					this.OnTechnologyTask1Changing(value);
					this.SendPropertyChanging();
					this._TechnologyTask1 = value;
					this.SendPropertyChanged("TechnologyTask1");
					this.OnTechnologyTask1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TechnologyId", DbType="Int NOT NULL")]
		public int TechnologyId
		{
			get
			{
				return this._TechnologyId;
			}
			set
			{
				if ((this._TechnologyId != value))
				{
					if (this._TechnologyMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTechnologyIdChanging(value);
					this.SendPropertyChanging();
					this._TechnologyId = value;
					this.SendPropertyChanged("TechnologyId");
					this.OnTechnologyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskId", DbType="Int NOT NULL")]
		public int TaskId
		{
			get
			{
				return this._TaskId;
			}
			set
			{
				if ((this._TaskId != value))
				{
					if (this._TaskInformation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIdChanging(value);
					this.SendPropertyChanging();
					this._TaskId = value;
					this.SendPropertyChanged("TaskId");
					this.OnTaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaskInformation_TechnologyTask", Storage="_TaskInformation", ThisKey="TaskId", OtherKey="TaskId", IsForeignKey=true)]
		public TaskInformation TaskInformation
		{
			get
			{
				return this._TaskInformation.Entity;
			}
			set
			{
				TaskInformation previousValue = this._TaskInformation.Entity;
				if (((previousValue != value) 
							|| (this._TaskInformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaskInformation.Entity = null;
						previousValue.TechnologyTasks.Remove(this);
					}
					this._TaskInformation.Entity = value;
					if ((value != null))
					{
						value.TechnologyTasks.Add(this);
						this._TaskId = value.TaskId;
					}
					else
					{
						this._TaskId = default(int);
					}
					this.SendPropertyChanged("TaskInformation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TechnologyMaster_TechnologyTask", Storage="_TechnologyMaster", ThisKey="TechnologyId", OtherKey="TechnologyId", IsForeignKey=true)]
		public TechnologyMaster TechnologyMaster
		{
			get
			{
				return this._TechnologyMaster.Entity;
			}
			set
			{
				TechnologyMaster previousValue = this._TechnologyMaster.Entity;
				if (((previousValue != value) 
							|| (this._TechnologyMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TechnologyMaster.Entity = null;
						previousValue.TechnologyTasks.Remove(this);
					}
					this._TechnologyMaster.Entity = value;
					if ((value != null))
					{
						value.TechnologyTasks.Add(this);
						this._TechnologyId = value.TechnologyId;
					}
					else
					{
						this._TechnologyId = default(int);
					}
					this.SendPropertyChanged("TechnologyMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
